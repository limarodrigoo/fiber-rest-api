// Code generated by MockGen. DO NOT EDIT.
// Source: repository/blocks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "rest-api/models"

	gomock "go.uber.org/mock/gomock"
)

// MockBlockRepository is a mock of BlockRepository interface.
type MockBlockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepositoryMockRecorder
}

// MockBlockRepositoryMockRecorder is the mock recorder for MockBlockRepository.
type MockBlockRepositoryMockRecorder struct {
	mock *MockBlockRepository
}

// NewMockBlockRepository creates a new mock instance.
func NewMockBlockRepository(ctrl *gomock.Controller) *MockBlockRepository {
	mock := &MockBlockRepository{ctrl: ctrl}
	mock.recorder = &MockBlockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepository) EXPECT() *MockBlockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBlockRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBlockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBlockRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockBlockRepository) GetAll() ([]*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBlockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBlockRepository)(nil).GetAll))
}

// GetByHash mocks base method.
func (m *MockBlockRepository) GetByHash(hash string) (*models.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", hash)
	ret0, _ := ret[0].(*models.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockBlockRepositoryMockRecorder) GetByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockBlockRepository)(nil).GetByHash), hash)
}

// Save mocks base method.
func (m *MockBlockRepository) Save(block models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBlockRepositoryMockRecorder) Save(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockRepository)(nil).Save), block)
}

// Update mocks base method.
func (m *MockBlockRepository) Update(block *models.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBlockRepositoryMockRecorder) Update(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlockRepository)(nil).Update), block)
}
