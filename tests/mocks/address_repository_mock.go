// Code generated by MockGen. DO NOT EDIT.
// Source: repository/address.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "rest-api/models"

	gomock "go.uber.org/mock/gomock"
)

// MockAddressRepository is a mock of AddressRepository interface.
type MockAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryMockRecorder
}

// MockAddressRepositoryMockRecorder is the mock recorder for MockAddressRepository.
type MockAddressRepositoryMockRecorder struct {
	mock *MockAddressRepository
}

// NewMockAddressRepository creates a new mock instance.
func NewMockAddressRepository(ctrl *gomock.Controller) *MockAddressRepository {
	mock := &MockAddressRepository{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepository) EXPECT() *MockAddressRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAddressRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockAddressRepository) GetAll() ([]*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAddressRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAddressRepository)(nil).GetAll))
}

// GetByAddress mocks base method.
func (m *MockAddressRepository) GetByAddress(hash string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", hash)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress.
func (mr *MockAddressRepositoryMockRecorder) GetByAddress(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockAddressRepository)(nil).GetByAddress), hash)
}

// Save mocks base method.
func (m *MockAddressRepository) Save(address models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAddressRepositoryMockRecorder) Save(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAddressRepository)(nil).Save), address)
}

// Update mocks base method.
func (m *MockAddressRepository) Update(address *models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressRepositoryMockRecorder) Update(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressRepository)(nil).Update), address)
}
